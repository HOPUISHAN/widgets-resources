// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SwitchWeb when checked is false and offName is setted renders with correct attributes 1`] = `
<button
  aria-checked={false}
  autoFocus={false}
  className="ant-switch"
  disabled={false}
  onClick={[Function]}
  onKeyDown={[Function]}
  role="switch"
  type="button"
>
  <div
    className="ant-switch-handle"
  />
  <span
    className="ant-switch-inner"
  >
    Off
  </span>
</button>
`;

exports[`SwitchWeb when checked is true and onName is setted renders with correct attributes 1`] = `
<button
  aria-checked={true}
  autoFocus={false}
  className="ant-switch ant-switch-checked"
  disabled={false}
  onClick={[Function]}
  onKeyDown={[Function]}
  role="switch"
  type="button"
>
  <div
    className="ant-switch-handle"
  />
  <span
    className="ant-switch-inner"
  >
    On
  </span>
</button>
`;

exports[`SwitchWeb when openconfirm and click onComfirm renders with correct attributes 1`] = `
<PopComponent
  confirmcancelText="cancel"
  confirmokText="ok"
  confirmokType="primary"
  onCancel={[Function]}
  onConfirm={[Function]}
>
  <ForwardRef
    cancelText="cancel"
    disabled={false}
    icon={<ForwardRef(ExclamationCircleFilled) />}
    okText="ok"
    okType="primary"
    onCancel={[Function]}
    onConfirm={[Function]}
    placement="top"
    style={
      Object {
        "backgroundColor": "red",
        "padding": 0,
      }
    }
    trigger="click"
  >
    <Popover
      _overlay={
        <LocaleReceiver
          componentName="Popconfirm"
          defaultLocale={
            Object {
              "cancelText": "Cancel",
              "okText": "OK",
            }
          }
        >
          [Function]
        </LocaleReceiver>
      }
      cancelText="cancel"
      disabled={false}
      icon={<ForwardRef(ExclamationCircleFilled) />}
      mouseEnterDelay={0.1}
      mouseLeaveDelay={0.1}
      okText="ok"
      okType="primary"
      onCancel={[Function]}
      onConfirm={[Function]}
      onVisibleChange={[Function]}
      overlayClassName="ant-popconfirm"
      overlayStyle={Object {}}
      placement="top"
      prefixCls="ant-popover"
      style={
        Object {
          "backgroundColor": "red",
          "padding": 0,
        }
      }
      trigger="click"
      visible={false}
    >
      <Tooltip
        arrowPointAtCenter={false}
        autoAdjustOverflow={true}
        cancelText="cancel"
        disabled={false}
        icon={<ForwardRef(ExclamationCircleFilled) />}
        mouseEnterDelay={0.1}
        mouseLeaveDelay={0.1}
        okText="ok"
        okType="primary"
        onCancel={[Function]}
        onConfirm={[Function]}
        onVisibleChange={[Function]}
        overlay={
          <LocaleReceiver
            componentName="Popconfirm"
            defaultLocale={
              Object {
                "cancelText": "Cancel",
                "okText": "OK",
              }
            }
          >
            [Function]
          </LocaleReceiver>
        }
        overlayClassName="ant-popconfirm"
        overlayStyle={Object {}}
        placement="top"
        prefixCls="ant-popover"
        style={
          Object {
            "backgroundColor": "red",
            "padding": 0,
          }
        }
        transitionName="ant-zoom-big"
        trigger="click"
        visible={false}
      >
        <ForwardRef(Tooltip)
          arrowContent={
            <span
              className="ant-popover-arrow-content"
            />
          }
          arrowPointAtCenter={false}
          autoAdjustOverflow={true}
          builtinPlacements={
            Object {
              "bottom": Object {
                "ignoreShake": true,
                "offset": Array [
                  0,
                  4,
                ],
                "overflow": Object {
                  "adjustX": 1,
                  "adjustY": 1,
                },
                "points": Array [
                  "tc",
                  "bc",
                ],
                "targetOffset": Array [
                  0,
                  0,
                ],
              },
              "bottomLeft": Object {
                "ignoreShake": true,
                "offset": Array [
                  0,
                  4,
                ],
                "overflow": Object {
                  "adjustX": 1,
                  "adjustY": 1,
                },
                "points": Array [
                  "tl",
                  "bl",
                ],
                "targetOffset": Array [
                  0,
                  0,
                ],
              },
              "bottomRight": Object {
                "ignoreShake": true,
                "offset": Array [
                  0,
                  4,
                ],
                "overflow": Object {
                  "adjustX": 1,
                  "adjustY": 1,
                },
                "points": Array [
                  "tr",
                  "br",
                ],
                "targetOffset": Array [
                  0,
                  0,
                ],
              },
              "left": Object {
                "ignoreShake": true,
                "offset": Array [
                  -4,
                  0,
                ],
                "overflow": Object {
                  "adjustX": 1,
                  "adjustY": 1,
                },
                "points": Array [
                  "cr",
                  "cl",
                ],
                "targetOffset": Array [
                  0,
                  0,
                ],
              },
              "leftBottom": Object {
                "ignoreShake": true,
                "offset": Array [
                  -4,
                  0,
                ],
                "overflow": Object {
                  "adjustX": 1,
                  "adjustY": 1,
                },
                "points": Array [
                  "br",
                  "bl",
                ],
                "targetOffset": Array [
                  0,
                  0,
                ],
              },
              "leftTop": Object {
                "ignoreShake": true,
                "offset": Array [
                  -4,
                  0,
                ],
                "overflow": Object {
                  "adjustX": 1,
                  "adjustY": 1,
                },
                "points": Array [
                  "tr",
                  "tl",
                ],
                "targetOffset": Array [
                  0,
                  0,
                ],
              },
              "right": Object {
                "ignoreShake": true,
                "offset": Array [
                  4,
                  0,
                ],
                "overflow": Object {
                  "adjustX": 1,
                  "adjustY": 1,
                },
                "points": Array [
                  "cl",
                  "cr",
                ],
                "targetOffset": Array [
                  0,
                  0,
                ],
              },
              "rightBottom": Object {
                "ignoreShake": true,
                "offset": Array [
                  4,
                  0,
                ],
                "overflow": Object {
                  "adjustX": 1,
                  "adjustY": 1,
                },
                "points": Array [
                  "bl",
                  "br",
                ],
                "targetOffset": Array [
                  0,
                  0,
                ],
              },
              "rightTop": Object {
                "ignoreShake": true,
                "offset": Array [
                  4,
                  0,
                ],
                "overflow": Object {
                  "adjustX": 1,
                  "adjustY": 1,
                },
                "points": Array [
                  "tl",
                  "tr",
                ],
                "targetOffset": Array [
                  0,
                  0,
                ],
              },
              "top": Object {
                "ignoreShake": true,
                "offset": Array [
                  0,
                  -4,
                ],
                "overflow": Object {
                  "adjustX": 1,
                  "adjustY": 1,
                },
                "points": Array [
                  "bc",
                  "tc",
                ],
                "targetOffset": Array [
                  0,
                  0,
                ],
              },
              "topLeft": Object {
                "ignoreShake": true,
                "offset": Array [
                  0,
                  -4,
                ],
                "overflow": Object {
                  "adjustX": 1,
                  "adjustY": 1,
                },
                "points": Array [
                  "bl",
                  "tl",
                ],
                "targetOffset": Array [
                  0,
                  0,
                ],
              },
              "topRight": Object {
                "ignoreShake": true,
                "offset": Array [
                  0,
                  -4,
                ],
                "overflow": Object {
                  "adjustX": 1,
                  "adjustY": 1,
                },
                "points": Array [
                  "br",
                  "tr",
                ],
                "targetOffset": Array [
                  0,
                  0,
                ],
              },
            }
          }
          cancelText="cancel"
          disabled={false}
          icon={<ForwardRef(ExclamationCircleFilled) />}
          motion={
            Object {
              "motionDeadline": 1000,
              "motionName": "ant-zoom-big",
            }
          }
          mouseEnterDelay={0.1}
          mouseLeaveDelay={0.1}
          okText="ok"
          okType="primary"
          onCancel={[Function]}
          onConfirm={[Function]}
          onPopupAlign={[Function]}
          onVisibleChange={[Function]}
          overlay={
            <LocaleReceiver
              componentName="Popconfirm"
              defaultLocale={
                Object {
                  "cancelText": "Cancel",
                  "okText": "OK",
                }
              }
            >
              [Function]
            </LocaleReceiver>
          }
          overlayClassName="ant-popconfirm"
          overlayStyle={Object {}}
          placement="top"
          prefixCls="ant-popover"
          style={
            Object {
              "backgroundColor": "red",
              "padding": 0,
            }
          }
          transitionName="ant-zoom-big"
          trigger="click"
          visible={false}
        >
          <Trigger
            action="click"
            afterPopupVisibleChange={[Function]}
            arrowContent={
              <span
                className="ant-popover-arrow-content"
              />
            }
            arrowPointAtCenter={false}
            autoAdjustOverflow={true}
            autoDestroy={false}
            blurDelay={0.15}
            builtinPlacements={
              Object {
                "bottom": Object {
                  "ignoreShake": true,
                  "offset": Array [
                    0,
                    4,
                  ],
                  "overflow": Object {
                    "adjustX": 1,
                    "adjustY": 1,
                  },
                  "points": Array [
                    "tc",
                    "bc",
                  ],
                  "targetOffset": Array [
                    0,
                    0,
                  ],
                },
                "bottomLeft": Object {
                  "ignoreShake": true,
                  "offset": Array [
                    0,
                    4,
                  ],
                  "overflow": Object {
                    "adjustX": 1,
                    "adjustY": 1,
                  },
                  "points": Array [
                    "tl",
                    "bl",
                  ],
                  "targetOffset": Array [
                    0,
                    0,
                  ],
                },
                "bottomRight": Object {
                  "ignoreShake": true,
                  "offset": Array [
                    0,
                    4,
                  ],
                  "overflow": Object {
                    "adjustX": 1,
                    "adjustY": 1,
                  },
                  "points": Array [
                    "tr",
                    "br",
                  ],
                  "targetOffset": Array [
                    0,
                    0,
                  ],
                },
                "left": Object {
                  "ignoreShake": true,
                  "offset": Array [
                    -4,
                    0,
                  ],
                  "overflow": Object {
                    "adjustX": 1,
                    "adjustY": 1,
                  },
                  "points": Array [
                    "cr",
                    "cl",
                  ],
                  "targetOffset": Array [
                    0,
                    0,
                  ],
                },
                "leftBottom": Object {
                  "ignoreShake": true,
                  "offset": Array [
                    -4,
                    0,
                  ],
                  "overflow": Object {
                    "adjustX": 1,
                    "adjustY": 1,
                  },
                  "points": Array [
                    "br",
                    "bl",
                  ],
                  "targetOffset": Array [
                    0,
                    0,
                  ],
                },
                "leftTop": Object {
                  "ignoreShake": true,
                  "offset": Array [
                    -4,
                    0,
                  ],
                  "overflow": Object {
                    "adjustX": 1,
                    "adjustY": 1,
                  },
                  "points": Array [
                    "tr",
                    "tl",
                  ],
                  "targetOffset": Array [
                    0,
                    0,
                  ],
                },
                "right": Object {
                  "ignoreShake": true,
                  "offset": Array [
                    4,
                    0,
                  ],
                  "overflow": Object {
                    "adjustX": 1,
                    "adjustY": 1,
                  },
                  "points": Array [
                    "cl",
                    "cr",
                  ],
                  "targetOffset": Array [
                    0,
                    0,
                  ],
                },
                "rightBottom": Object {
                  "ignoreShake": true,
                  "offset": Array [
                    4,
                    0,
                  ],
                  "overflow": Object {
                    "adjustX": 1,
                    "adjustY": 1,
                  },
                  "points": Array [
                    "bl",
                    "br",
                  ],
                  "targetOffset": Array [
                    0,
                    0,
                  ],
                },
                "rightTop": Object {
                  "ignoreShake": true,
                  "offset": Array [
                    4,
                    0,
                  ],
                  "overflow": Object {
                    "adjustX": 1,
                    "adjustY": 1,
                  },
                  "points": Array [
                    "tl",
                    "tr",
                  ],
                  "targetOffset": Array [
                    0,
                    0,
                  ],
                },
                "top": Object {
                  "ignoreShake": true,
                  "offset": Array [
                    0,
                    -4,
                  ],
                  "overflow": Object {
                    "adjustX": 1,
                    "adjustY": 1,
                  },
                  "points": Array [
                    "bc",
                    "tc",
                  ],
                  "targetOffset": Array [
                    0,
                    0,
                  ],
                },
                "topLeft": Object {
                  "ignoreShake": true,
                  "offset": Array [
                    0,
                    -4,
                  ],
                  "overflow": Object {
                    "adjustX": 1,
                    "adjustY": 1,
                  },
                  "points": Array [
                    "bl",
                    "tl",
                  ],
                  "targetOffset": Array [
                    0,
                    0,
                  ],
                },
                "topRight": Object {
                  "ignoreShake": true,
                  "offset": Array [
                    0,
                    -4,
                  ],
                  "overflow": Object {
                    "adjustX": 1,
                    "adjustY": 1,
                  },
                  "points": Array [
                    "br",
                    "tr",
                  ],
                  "targetOffset": Array [
                    0,
                    0,
                  ],
                },
              }
            }
            cancelText="cancel"
            defaultPopupVisible={false}
            destroyPopupOnHide={false}
            disabled={false}
            focusDelay={0}
            getDocument={[Function]}
            getPopupClassNameFromAlign={[Function]}
            hideAction={Array []}
            icon={<ForwardRef(ExclamationCircleFilled) />}
            mask={false}
            maskClosable={true}
            mouseEnterDelay={0.1}
            mouseLeaveDelay={0.1}
            okText="ok"
            okType="primary"
            onCancel={[Function]}
            onConfirm={[Function]}
            onPopupAlign={[Function]}
            onPopupVisibleChange={[Function]}
            overlay={
              <LocaleReceiver
                componentName="Popconfirm"
                defaultLocale={
                  Object {
                    "cancelText": "Cancel",
                    "okText": "OK",
                  }
                }
              >
                [Function]
              </LocaleReceiver>
            }
            popup={[Function]}
            popupAlign={Object {}}
            popupClassName="ant-popconfirm"
            popupMotion={
              Object {
                "motionDeadline": 1000,
                "motionName": "ant-zoom-big",
              }
            }
            popupPlacement="top"
            popupStyle={Object {}}
            popupTransitionName="ant-zoom-big"
            popupVisible={false}
            prefixCls="ant-popover"
            showAction={Array []}
            style={
              Object {
                "backgroundColor": "red",
                "padding": 0,
              }
            }
            visible={false}
          >
            <SwitchComponent
              autoFocus={false}
              checked={false}
              disabled={false}
              key="trigger"
              loadingFlag={false}
              offName=""
              onChange={[Function]}
              onClick={[Function]}
              onKeyDown={[Function]}
              onMouseDown={[Function]}
              onName=""
              onTouchStart={[Function]}
              size="default"
            >
              <Switch
                autoFocus={false}
                checked={false}
                disabled={false}
                loading={false}
                onChange={[Function]}
                onClick={[Function]}
                size="default"
              >
                <Wave
                  insertExtraNode={true}
                >
                  <Switch
                    autoFocus={false}
                    checked={false}
                    className=""
                    disabled={false}
                    loadingIcon={
                      <div
                        className="ant-switch-handle"
                      />
                    }
                    onChange={[Function]}
                    onClick={[Function]}
                    prefixCls="ant-switch"
                  >
                    <button
                      aria-checked={false}
                      autoFocus={false}
                      className="ant-switch"
                      disabled={false}
                      onClick={[Function]}
                      onKeyDown={[Function]}
                      role="switch"
                      type="button"
                    >
                      <div
                        className="ant-switch-handle"
                      />
                      <span
                        className="ant-switch-inner"
                      />
                    </button>
                  </Switch>
                </Wave>
              </Switch>
            </SwitchComponent>
          </Trigger>
        </ForwardRef(Tooltip)>
      </Tooltip>
    </Popover>
  </ForwardRef>
</PopComponent>
`;

exports[`SwitchWeb when openconfirm and type is modal renders with correct attributes 1`] = `
<SwitchWeb
  autoFocus={false}
  checked={
    Object {
      "displayValue": "Formatted false",
      "formatter": Object {
        "config": Object {},
        "format": [MockFunction],
        "getFormatPlaceholder": [MockFunction],
        "parse": [MockFunction],
        "type": "datetime",
        "withConfig": [MockFunction],
      },
      "readOnly": false,
      "setFormatter": [MockFunction],
      "setTextValue": [MockFunction],
      "setValidator": [MockFunction],
      "setValue": [MockFunction],
      "status": "available",
      "validation": undefined,
      "value": false,
    }
  }
  confirmType="pop"
  confirmcancelText="cancel"
  confirmokText="ok"
  confirmokType="primary"
  id="runjian.switchweb.SwitchWeb1"
  name="sYYSwitchWeb"
  offName=""
  onCancel={
    Object {
      "canExecute": true,
      "execute": [MockFunction],
      "isExecuting": false,
    }
  }
  onConfirm={
    Object {
      "canExecute": true,
      "execute": [MockFunction],
      "isExecuting": false,
    }
  }
  onName=""
  openconfirm={true}
  size="default"
  tabIndex={0}
>
  <Switch
    autoFocus={false}
    checked={false}
    confirmType="pop"
    confirmcancelText="cancel"
    confirmokText="ok"
    confirmokType="primary"
    disabled={false}
    loadingFlag={false}
    offName=""
    onCancel={[Function]}
    onChange={[Function]}
    onClick={[Function]}
    onConfirm={[Function]}
    onName=""
    openconfirm={true}
    size="default"
  >
    <div>
      <PopComponent
        confirmcancelText="cancel"
        confirmokText="ok"
        confirmokType="primary"
        onCancel={[Function]}
        onConfirm={[Function]}
      >
        <ForwardRef
          cancelText="cancel"
          disabled={false}
          icon={<ForwardRef(ExclamationCircleFilled) />}
          okText="ok"
          okType="primary"
          onCancel={[Function]}
          onConfirm={[Function]}
          placement="top"
          style={
            Object {
              "backgroundColor": "red",
              "padding": 0,
            }
          }
          trigger="click"
        >
          <Popover
            _overlay={
              <LocaleReceiver
                componentName="Popconfirm"
                defaultLocale={
                  Object {
                    "cancelText": "Cancel",
                    "okText": "OK",
                  }
                }
              >
                [Function]
              </LocaleReceiver>
            }
            cancelText="cancel"
            disabled={false}
            icon={<ForwardRef(ExclamationCircleFilled) />}
            mouseEnterDelay={0.1}
            mouseLeaveDelay={0.1}
            okText="ok"
            okType="primary"
            onCancel={[Function]}
            onConfirm={[Function]}
            onVisibleChange={[Function]}
            overlayClassName="ant-popconfirm"
            overlayStyle={Object {}}
            placement="top"
            prefixCls="ant-popover"
            style={
              Object {
                "backgroundColor": "red",
                "padding": 0,
              }
            }
            trigger="click"
            visible={true}
          >
            <Tooltip
              arrowPointAtCenter={false}
              autoAdjustOverflow={true}
              cancelText="cancel"
              disabled={false}
              icon={<ForwardRef(ExclamationCircleFilled) />}
              mouseEnterDelay={0.1}
              mouseLeaveDelay={0.1}
              okText="ok"
              okType="primary"
              onCancel={[Function]}
              onConfirm={[Function]}
              onVisibleChange={[Function]}
              overlay={
                <LocaleReceiver
                  componentName="Popconfirm"
                  defaultLocale={
                    Object {
                      "cancelText": "Cancel",
                      "okText": "OK",
                    }
                  }
                >
                  [Function]
                </LocaleReceiver>
              }
              overlayClassName="ant-popconfirm"
              overlayStyle={Object {}}
              placement="top"
              prefixCls="ant-popover"
              style={
                Object {
                  "backgroundColor": "red",
                  "padding": 0,
                }
              }
              transitionName="ant-zoom-big"
              trigger="click"
              visible={true}
            >
              <ForwardRef(Tooltip)
                arrowContent={
                  <span
                    className="ant-popover-arrow-content"
                  />
                }
                arrowPointAtCenter={false}
                autoAdjustOverflow={true}
                builtinPlacements={
                  Object {
                    "bottom": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        0,
                        4,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "tc",
                        "bc",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "bottomLeft": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        0,
                        4,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "tl",
                        "bl",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "bottomRight": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        0,
                        4,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "tr",
                        "br",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "left": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        -4,
                        0,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "cr",
                        "cl",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "leftBottom": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        -4,
                        0,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "br",
                        "bl",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "leftTop": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        -4,
                        0,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "tr",
                        "tl",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "right": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        4,
                        0,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "cl",
                        "cr",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "rightBottom": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        4,
                        0,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "bl",
                        "br",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "rightTop": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        4,
                        0,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "tl",
                        "tr",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "top": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        0,
                        -4,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "bc",
                        "tc",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "topLeft": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        0,
                        -4,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "bl",
                        "tl",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "topRight": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        0,
                        -4,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "br",
                        "tr",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                  }
                }
                cancelText="cancel"
                disabled={false}
                icon={<ForwardRef(ExclamationCircleFilled) />}
                motion={
                  Object {
                    "motionDeadline": 1000,
                    "motionName": "ant-zoom-big",
                  }
                }
                mouseEnterDelay={0.1}
                mouseLeaveDelay={0.1}
                okText="ok"
                okType="primary"
                onCancel={[Function]}
                onConfirm={[Function]}
                onPopupAlign={[Function]}
                onVisibleChange={[Function]}
                overlay={
                  <LocaleReceiver
                    componentName="Popconfirm"
                    defaultLocale={
                      Object {
                        "cancelText": "Cancel",
                        "okText": "OK",
                      }
                    }
                  >
                    [Function]
                  </LocaleReceiver>
                }
                overlayClassName="ant-popconfirm"
                overlayStyle={Object {}}
                placement="top"
                prefixCls="ant-popover"
                style={
                  Object {
                    "backgroundColor": "red",
                    "padding": 0,
                  }
                }
                transitionName="ant-zoom-big"
                trigger="click"
                visible={true}
              >
                <Trigger
                  action="click"
                  afterPopupVisibleChange={[Function]}
                  arrowContent={
                    <span
                      className="ant-popover-arrow-content"
                    />
                  }
                  arrowPointAtCenter={false}
                  autoAdjustOverflow={true}
                  autoDestroy={false}
                  blurDelay={0.15}
                  builtinPlacements={
                    Object {
                      "bottom": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          0,
                          4,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "tc",
                          "bc",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "bottomLeft": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          0,
                          4,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "tl",
                          "bl",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "bottomRight": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          0,
                          4,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "tr",
                          "br",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "left": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          -4,
                          0,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "cr",
                          "cl",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "leftBottom": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          -4,
                          0,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "br",
                          "bl",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "leftTop": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          -4,
                          0,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "tr",
                          "tl",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "right": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          4,
                          0,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "cl",
                          "cr",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "rightBottom": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          4,
                          0,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "bl",
                          "br",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "rightTop": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          4,
                          0,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "tl",
                          "tr",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "top": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          0,
                          -4,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "bc",
                          "tc",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "topLeft": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          0,
                          -4,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "bl",
                          "tl",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "topRight": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          0,
                          -4,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "br",
                          "tr",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                    }
                  }
                  cancelText="cancel"
                  defaultPopupVisible={false}
                  destroyPopupOnHide={false}
                  disabled={false}
                  focusDelay={0}
                  getDocument={[Function]}
                  getPopupClassNameFromAlign={[Function]}
                  hideAction={Array []}
                  icon={<ForwardRef(ExclamationCircleFilled) />}
                  mask={false}
                  maskClosable={true}
                  mouseEnterDelay={0.1}
                  mouseLeaveDelay={0.1}
                  okText="ok"
                  okType="primary"
                  onCancel={[Function]}
                  onConfirm={[Function]}
                  onPopupAlign={[Function]}
                  onPopupVisibleChange={[Function]}
                  overlay={
                    <LocaleReceiver
                      componentName="Popconfirm"
                      defaultLocale={
                        Object {
                          "cancelText": "Cancel",
                          "okText": "OK",
                        }
                      }
                    >
                      [Function]
                    </LocaleReceiver>
                  }
                  popup={[Function]}
                  popupAlign={Object {}}
                  popupClassName="ant-popconfirm"
                  popupMotion={
                    Object {
                      "motionDeadline": 1000,
                      "motionName": "ant-zoom-big",
                    }
                  }
                  popupPlacement="top"
                  popupStyle={Object {}}
                  popupTransitionName="ant-zoom-big"
                  popupVisible={true}
                  prefixCls="ant-popover"
                  showAction={Array []}
                  style={
                    Object {
                      "backgroundColor": "red",
                      "padding": 0,
                    }
                  }
                  visible={true}
                >
                  <SwitchComponent
                    autoFocus={false}
                    checked={false}
                    className="ant-popover-open"
                    disabled={false}
                    key="trigger"
                    loadingFlag={false}
                    offName=""
                    onChange={[Function]}
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    onMouseDown={[Function]}
                    onName=""
                    onTouchStart={[Function]}
                    size="default"
                  >
                    <Switch
                      autoFocus={false}
                      checked={false}
                      disabled={false}
                      loading={false}
                      onChange={[Function]}
                      onClick={[Function]}
                      size="default"
                    >
                      <Wave
                        insertExtraNode={true}
                      >
                        <Switch
                          autoFocus={false}
                          checked={false}
                          className=""
                          disabled={false}
                          loadingIcon={
                            <div
                              className="ant-switch-handle"
                            />
                          }
                          onChange={[Function]}
                          onClick={[Function]}
                          prefixCls="ant-switch"
                        >
                          <button
                            aria-checked={false}
                            autoFocus={false}
                            className="ant-switch"
                            disabled={false}
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            role="switch"
                            type="button"
                          >
                            <div
                              className="ant-switch-handle"
                            />
                            <span
                              className="ant-switch-inner"
                            />
                          </button>
                        </Switch>
                      </Wave>
                    </Switch>
                  </SwitchComponent>
                  <ForwardRef
                    didUpdate={[Function]}
                    getContainer={[Function]}
                    key="portal"
                  >
                    <Portal
                      containerInfo={
                        <div
                          style="position: absolute; top: 0px; left: 0px; width: 100%;"
                        >
                          <div>
                            <div
                              class="ant-popover ant-popconfirm"
                              style="opacity: 0;"
                            >
                              <div
                                class="ant-popover-content"
                              >
                                <div
                                  class="ant-popover-arrow"
                                >
                                  <span
                                    class="ant-popover-arrow-content"
                                  />
                                </div>
                                <div
                                  class="ant-popover-inner"
                                  role="tooltip"
                                >
                                  <div
                                    class="ant-popover-inner-content"
                                  >
                                    <div
                                      class="ant-popover-message"
                                    >
                                      <span
                                        aria-label="exclamation-circle"
                                        class="anticon anticon-exclamation-circle"
                                        role="img"
                                      >
                                        <svg
                                          aria-hidden="true"
                                          data-icon="exclamation-circle"
                                          fill="currentColor"
                                          focusable="false"
                                          height="1em"
                                          viewBox="64 64 896 896"
                                          width="1em"
                                        >
                                          <path
                                            d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm-32 232c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V296zm32 440a48.01 48.01 0 010-96 48.01 48.01 0 010 96z"
                                          />
                                        </svg>
                                      </span>
                                      <div
                                        class="ant-popover-message-title"
                                      />
                                    </div>
                                    <div
                                      class="ant-popover-buttons"
                                    >
                                      <button
                                        class="ant-btn ant-btn-default ant-btn-sm"
                                        type="button"
                                      >
                                        <span>
                                          cancel
                                        </span>
                                      </button>
                                      <button
                                        class="ant-btn ant-btn-primary ant-btn-sm"
                                        type="button"
                                      >
                                        <span>
                                          ok
                                        </span>
                                      </button>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      }
                    >
                      <Popup
                        align={
                          Object {
                            "ignoreShake": true,
                            "offset": Array [
                              0,
                              -4,
                            ],
                            "overflow": Object {
                              "adjustX": 1,
                              "adjustY": 1,
                            },
                            "points": Array [
                              "bc",
                              "tc",
                            ],
                            "targetOffset": Array [
                              0,
                              0,
                            ],
                          }
                        }
                        className="ant-popconfirm"
                        destroyPopupOnHide={false}
                        getClassNameFromAlign={[Function]}
                        getRootDomNode={[Function]}
                        mask={false}
                        motion={
                          Object {
                            "motionDeadline": 1000,
                            "motionName": "ant-zoom-big",
                          }
                        }
                        onAlign={[Function]}
                        onMouseDown={[Function]}
                        onTouchStart={[Function]}
                        prefixCls="ant-popover"
                        style={Object {}}
                        transitionName="ant-zoom-big"
                        visible={true}
                      >
                        <div>
                          <Mask
                            align={
                              Object {
                                "ignoreShake": true,
                                "offset": Array [
                                  0,
                                  -4,
                                ],
                                "overflow": Object {
                                  "adjustX": 1,
                                  "adjustY": 1,
                                },
                                "points": Array [
                                  "bc",
                                  "tc",
                                ],
                                "targetOffset": Array [
                                  0,
                                  0,
                                ],
                              }
                            }
                            className="ant-popconfirm"
                            destroyPopupOnHide={false}
                            getClassNameFromAlign={[Function]}
                            getRootDomNode={[Function]}
                            mask={false}
                            motion={
                              Object {
                                "motionDeadline": 1000,
                                "motionName": "ant-zoom-big",
                              }
                            }
                            onAlign={[Function]}
                            onMouseDown={[Function]}
                            onTouchStart={[Function]}
                            prefixCls="ant-popover"
                            style={Object {}}
                            transitionName="ant-zoom-big"
                            visible={true}
                          />
                          <PopupInner
                            align={
                              Object {
                                "ignoreShake": true,
                                "offset": Array [
                                  0,
                                  -4,
                                ],
                                "overflow": Object {
                                  "adjustX": 1,
                                  "adjustY": 1,
                                },
                                "points": Array [
                                  "bc",
                                  "tc",
                                ],
                                "targetOffset": Array [
                                  0,
                                  0,
                                ],
                              }
                            }
                            className="ant-popconfirm"
                            destroyPopupOnHide={false}
                            getClassNameFromAlign={[Function]}
                            getRootDomNode={[Function]}
                            mask={false}
                            motion={
                              Object {
                                "motionDeadline": 1000,
                                "motionName": "ant-zoom-big",
                              }
                            }
                            onAlign={[Function]}
                            onMouseDown={[Function]}
                            onTouchStart={[Function]}
                            prefixCls="ant-popover"
                            style={Object {}}
                            transitionName="ant-zoom-big"
                            visible={true}
                          >
                            <CSSMotion
                              leavedClassName="ant-popover-hidden"
                              motionDeadline={1000}
                              motionName="ant-zoom-big"
                              onAppearEnd={[Function]}
                              onAppearPrepare={[Function]}
                              onEnterEnd={[Function]}
                              onEnterPrepare={[Function]}
                              onLeaveEnd={[Function]}
                              removeOnLeave={false}
                              visible={true}
                            >
                              <DomWrapper>
                                <Align
                                  align={
                                    Object {
                                      "ignoreShake": true,
                                      "offset": Array [
                                        0,
                                        -4,
                                      ],
                                      "overflow": Object {
                                        "adjustX": 1,
                                        "adjustY": 1,
                                      },
                                      "points": Array [
                                        "bc",
                                        "tc",
                                      ],
                                      "targetOffset": Array [
                                        0,
                                        0,
                                      ],
                                    }
                                  }
                                  disabled={true}
                                  key="popup"
                                  monitorWindowResize={true}
                                  onAlign={[Function]}
                                  target={[Function]}
                                >
                                  <div
                                    className="ant-popover ant-popconfirm"
                                    onMouseDownCapture={[Function]}
                                    onTouchStartCapture={[Function]}
                                    style={
                                      Object {
                                        "opacity": 0,
                                        "pointerEvents": undefined,
                                        "zIndex": undefined,
                                      }
                                    }
                                  >
                                    <div
                                      className="ant-popover-content"
                                    >
                                      <div
                                        className="ant-popover-arrow"
                                        key="arrow"
                                      >
                                        <span
                                          className="ant-popover-arrow-content"
                                        />
                                      </div>
                                      <Content
                                        key="content"
                                        overlay={
                                          <LocaleReceiver
                                            componentName="Popconfirm"
                                            defaultLocale={
                                              Object {
                                                "cancelText": "Cancel",
                                                "okText": "OK",
                                              }
                                            }
                                          >
                                            [Function]
                                          </LocaleReceiver>
                                        }
                                        prefixCls="ant-popover"
                                      >
                                        <div
                                          className="ant-popover-inner"
                                          role="tooltip"
                                        >
                                          <LocaleReceiver
                                            componentName="Popconfirm"
                                            defaultLocale={
                                              Object {
                                                "cancelText": "Cancel",
                                                "okText": "OK",
                                              }
                                            }
                                          >
                                            <div
                                              className="ant-popover-inner-content"
                                            >
                                              <div
                                                className="ant-popover-message"
                                              >
                                                <ForwardRef(ExclamationCircleFilled)>
                                                  <AntdIcon
                                                    icon={
                                                      Object {
                                                        "icon": Object {
                                                          "attrs": Object {
                                                            "focusable": "false",
                                                            "viewBox": "64 64 896 896",
                                                          },
                                                          "children": Array [
                                                            Object {
                                                              "attrs": Object {
                                                                "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm-32 232c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V296zm32 440a48.01 48.01 0 010-96 48.01 48.01 0 010 96z",
                                                              },
                                                              "tag": "path",
                                                            },
                                                          ],
                                                          "tag": "svg",
                                                        },
                                                        "name": "exclamation-circle",
                                                        "theme": "filled",
                                                      }
                                                    }
                                                  >
                                                    <span
                                                      aria-label="exclamation-circle"
                                                      className="anticon anticon-exclamation-circle"
                                                      role="img"
                                                    >
                                                      <IconReact
                                                        icon={
                                                          Object {
                                                            "icon": Object {
                                                              "attrs": Object {
                                                                "focusable": "false",
                                                                "viewBox": "64 64 896 896",
                                                              },
                                                              "children": Array [
                                                                Object {
                                                                  "attrs": Object {
                                                                    "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm-32 232c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V296zm32 440a48.01 48.01 0 010-96 48.01 48.01 0 010 96z",
                                                                  },
                                                                  "tag": "path",
                                                                },
                                                              ],
                                                              "tag": "svg",
                                                            },
                                                            "name": "exclamation-circle",
                                                            "theme": "filled",
                                                          }
                                                        }
                                                      >
                                                        <svg
                                                          aria-hidden="true"
                                                          data-icon="exclamation-circle"
                                                          fill="currentColor"
                                                          focusable="false"
                                                          height="1em"
                                                          key="svg-exclamation-circle"
                                                          viewBox="64 64 896 896"
                                                          width="1em"
                                                        >
                                                          <path
                                                            d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm-32 232c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V296zm32 440a48.01 48.01 0 010-96 48.01 48.01 0 010 96z"
                                                            key="svg-exclamation-circle-svg-0"
                                                          />
                                                        </svg>
                                                      </IconReact>
                                                    </span>
                                                  </AntdIcon>
                                                </ForwardRef(ExclamationCircleFilled)>
                                                <div
                                                  className="ant-popover-message-title"
                                                />
                                              </div>
                                              <div
                                                className="ant-popover-buttons"
                                              >
                                                <Button
                                                  onClick={[Function]}
                                                  size="small"
                                                >
                                                  <Wave
                                                    disabled={false}
                                                  >
                                                    <button
                                                      className="ant-btn ant-btn-default ant-btn-sm"
                                                      disabled={false}
                                                      onClick={[Function]}
                                                      type="button"
                                                    >
                                                      <LoadingIcon
                                                        existIcon={false}
                                                        loading={false}
                                                        prefixCls="ant-btn"
                                                      >
                                                        <CSSMotion
                                                          motionName="ant-btn-loading-icon-motion"
                                                          onAppearActive={[Function]}
                                                          onAppearStart={[Function]}
                                                          onEnterActive={[Function]}
                                                          onEnterStart={[Function]}
                                                          onLeaveActive={[Function]}
                                                          onLeaveStart={[Function]}
                                                          removeOnLeave={true}
                                                          visible={false}
                                                        >
                                                          <DomWrapper />
                                                        </CSSMotion>
                                                      </LoadingIcon>
                                                      <span
                                                        key=".0"
                                                      >
                                                        cancel
                                                      </span>
                                                    </button>
                                                  </Wave>
                                                </Button>
                                                <ActionButton
                                                  actionFn={[Function]}
                                                  buttonProps={
                                                    Object {
                                                      "size": "small",
                                                      "type": "primary",
                                                    }
                                                  }
                                                  close={[Function]}
                                                  emitEvent={true}
                                                  prefixCls="ant-btn"
                                                  quitOnNullishReturnValue={true}
                                                >
                                                  <Button
                                                    loading={false}
                                                    onClick={[Function]}
                                                    prefixCls="ant-btn"
                                                    size="small"
                                                    type="primary"
                                                  >
                                                    <Wave
                                                      disabled={false}
                                                    >
                                                      <button
                                                        className="ant-btn ant-btn-primary ant-btn-sm"
                                                        disabled={false}
                                                        onClick={[Function]}
                                                        type="button"
                                                      >
                                                        <LoadingIcon
                                                          existIcon={false}
                                                          loading={false}
                                                          prefixCls="ant-btn"
                                                        >
                                                          <CSSMotion
                                                            motionName="ant-btn-loading-icon-motion"
                                                            onAppearActive={[Function]}
                                                            onAppearStart={[Function]}
                                                            onEnterActive={[Function]}
                                                            onEnterStart={[Function]}
                                                            onLeaveActive={[Function]}
                                                            onLeaveStart={[Function]}
                                                            removeOnLeave={true}
                                                            visible={false}
                                                          >
                                                            <DomWrapper />
                                                          </CSSMotion>
                                                        </LoadingIcon>
                                                        <span
                                                          key=".0"
                                                        >
                                                          ok
                                                        </span>
                                                      </button>
                                                    </Wave>
                                                  </Button>
                                                </ActionButton>
                                              </div>
                                            </div>
                                          </LocaleReceiver>
                                        </div>
                                      </Content>
                                    </div>
                                  </div>
                                </Align>
                              </DomWrapper>
                            </CSSMotion>
                          </PopupInner>
                        </div>
                      </Popup>
                    </Portal>
                  </ForwardRef>
                </Trigger>
              </ForwardRef(Tooltip)>
            </Tooltip>
          </Popover>
        </ForwardRef>
      </PopComponent>
    </div>
  </Switch>
</SwitchWeb>
`;

exports[`SwitchWeb when openconfirm and type is pop renders with correct attributes 1`] = `
<SwitchWeb
  autoFocus={false}
  checked={
    Object {
      "displayValue": "Formatted false",
      "formatter": Object {
        "config": Object {},
        "format": [MockFunction] {
          "calls": Array [
            Array [
              false,
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": "Formatted false",
            },
          ],
        },
        "getFormatPlaceholder": [MockFunction],
        "parse": [MockFunction],
        "type": "datetime",
        "withConfig": [MockFunction],
      },
      "readOnly": false,
      "setFormatter": [MockFunction],
      "setTextValue": [MockFunction],
      "setValidator": [MockFunction],
      "setValue": [MockFunction],
      "status": "available",
      "validation": undefined,
      "value": false,
    }
  }
  confirmType="pop"
  confirmcancelText="cancel"
  confirmokText="ok"
  confirmokType="primary"
  id="runjian.switchweb.SwitchWeb1"
  name="sYYSwitchWeb"
  offName=""
  onCancel={
    Object {
      "canExecute": true,
      "execute": [MockFunction],
      "isExecuting": false,
    }
  }
  onConfirm={
    Object {
      "canExecute": true,
      "execute": [MockFunction],
      "isExecuting": false,
    }
  }
  onName=""
  openconfirm={true}
  size="default"
  tabIndex={0}
>
  <Switch
    autoFocus={false}
    checked={false}
    confirmType="pop"
    confirmcancelText="cancel"
    confirmokText="ok"
    confirmokType="primary"
    disabled={false}
    loadingFlag={false}
    offName=""
    onCancel={[Function]}
    onChange={[Function]}
    onClick={[Function]}
    onConfirm={[Function]}
    onName=""
    openconfirm={true}
    size="default"
  >
    <div>
      <PopComponent
        confirmcancelText="cancel"
        confirmokText="ok"
        confirmokType="primary"
        onCancel={[Function]}
        onConfirm={[Function]}
      >
        <ForwardRef
          cancelText="cancel"
          disabled={false}
          icon={<ForwardRef(ExclamationCircleFilled) />}
          okText="ok"
          okType="primary"
          onCancel={[Function]}
          onConfirm={[Function]}
          placement="top"
          style={
            Object {
              "backgroundColor": "red",
              "padding": 0,
            }
          }
          trigger="click"
        >
          <Popover
            _overlay={
              <LocaleReceiver
                componentName="Popconfirm"
                defaultLocale={
                  Object {
                    "cancelText": "Cancel",
                    "okText": "OK",
                  }
                }
              >
                [Function]
              </LocaleReceiver>
            }
            cancelText="cancel"
            disabled={false}
            icon={<ForwardRef(ExclamationCircleFilled) />}
            mouseEnterDelay={0.1}
            mouseLeaveDelay={0.1}
            okText="ok"
            okType="primary"
            onCancel={[Function]}
            onConfirm={[Function]}
            onVisibleChange={[Function]}
            overlayClassName="ant-popconfirm"
            overlayStyle={Object {}}
            placement="top"
            prefixCls="ant-popover"
            style={
              Object {
                "backgroundColor": "red",
                "padding": 0,
              }
            }
            trigger="click"
            visible={true}
          >
            <Tooltip
              arrowPointAtCenter={false}
              autoAdjustOverflow={true}
              cancelText="cancel"
              disabled={false}
              icon={<ForwardRef(ExclamationCircleFilled) />}
              mouseEnterDelay={0.1}
              mouseLeaveDelay={0.1}
              okText="ok"
              okType="primary"
              onCancel={[Function]}
              onConfirm={[Function]}
              onVisibleChange={[Function]}
              overlay={
                <LocaleReceiver
                  componentName="Popconfirm"
                  defaultLocale={
                    Object {
                      "cancelText": "Cancel",
                      "okText": "OK",
                    }
                  }
                >
                  [Function]
                </LocaleReceiver>
              }
              overlayClassName="ant-popconfirm"
              overlayStyle={Object {}}
              placement="top"
              prefixCls="ant-popover"
              style={
                Object {
                  "backgroundColor": "red",
                  "padding": 0,
                }
              }
              transitionName="ant-zoom-big"
              trigger="click"
              visible={true}
            >
              <ForwardRef(Tooltip)
                arrowContent={
                  <span
                    className="ant-popover-arrow-content"
                  />
                }
                arrowPointAtCenter={false}
                autoAdjustOverflow={true}
                builtinPlacements={
                  Object {
                    "bottom": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        0,
                        4,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "tc",
                        "bc",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "bottomLeft": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        0,
                        4,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "tl",
                        "bl",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "bottomRight": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        0,
                        4,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "tr",
                        "br",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "left": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        -4,
                        0,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "cr",
                        "cl",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "leftBottom": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        -4,
                        0,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "br",
                        "bl",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "leftTop": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        -4,
                        0,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "tr",
                        "tl",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "right": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        4,
                        0,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "cl",
                        "cr",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "rightBottom": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        4,
                        0,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "bl",
                        "br",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "rightTop": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        4,
                        0,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "tl",
                        "tr",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "top": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        0,
                        -4,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "bc",
                        "tc",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "topLeft": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        0,
                        -4,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "bl",
                        "tl",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "topRight": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        0,
                        -4,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "br",
                        "tr",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                  }
                }
                cancelText="cancel"
                disabled={false}
                icon={<ForwardRef(ExclamationCircleFilled) />}
                motion={
                  Object {
                    "motionDeadline": 1000,
                    "motionName": "ant-zoom-big",
                  }
                }
                mouseEnterDelay={0.1}
                mouseLeaveDelay={0.1}
                okText="ok"
                okType="primary"
                onCancel={[Function]}
                onConfirm={[Function]}
                onPopupAlign={[Function]}
                onVisibleChange={[Function]}
                overlay={
                  <LocaleReceiver
                    componentName="Popconfirm"
                    defaultLocale={
                      Object {
                        "cancelText": "Cancel",
                        "okText": "OK",
                      }
                    }
                  >
                    [Function]
                  </LocaleReceiver>
                }
                overlayClassName="ant-popconfirm"
                overlayStyle={Object {}}
                placement="top"
                prefixCls="ant-popover"
                style={
                  Object {
                    "backgroundColor": "red",
                    "padding": 0,
                  }
                }
                transitionName="ant-zoom-big"
                trigger="click"
                visible={true}
              >
                <Trigger
                  action="click"
                  afterPopupVisibleChange={[Function]}
                  arrowContent={
                    <span
                      className="ant-popover-arrow-content"
                    />
                  }
                  arrowPointAtCenter={false}
                  autoAdjustOverflow={true}
                  autoDestroy={false}
                  blurDelay={0.15}
                  builtinPlacements={
                    Object {
                      "bottom": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          0,
                          4,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "tc",
                          "bc",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "bottomLeft": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          0,
                          4,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "tl",
                          "bl",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "bottomRight": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          0,
                          4,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "tr",
                          "br",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "left": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          -4,
                          0,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "cr",
                          "cl",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "leftBottom": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          -4,
                          0,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "br",
                          "bl",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "leftTop": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          -4,
                          0,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "tr",
                          "tl",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "right": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          4,
                          0,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "cl",
                          "cr",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "rightBottom": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          4,
                          0,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "bl",
                          "br",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "rightTop": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          4,
                          0,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "tl",
                          "tr",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "top": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          0,
                          -4,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "bc",
                          "tc",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "topLeft": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          0,
                          -4,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "bl",
                          "tl",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "topRight": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          0,
                          -4,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "br",
                          "tr",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                    }
                  }
                  cancelText="cancel"
                  defaultPopupVisible={false}
                  destroyPopupOnHide={false}
                  disabled={false}
                  focusDelay={0}
                  getDocument={[Function]}
                  getPopupClassNameFromAlign={[Function]}
                  hideAction={Array []}
                  icon={<ForwardRef(ExclamationCircleFilled) />}
                  mask={false}
                  maskClosable={true}
                  mouseEnterDelay={0.1}
                  mouseLeaveDelay={0.1}
                  okText="ok"
                  okType="primary"
                  onCancel={[Function]}
                  onConfirm={[Function]}
                  onPopupAlign={[Function]}
                  onPopupVisibleChange={[Function]}
                  overlay={
                    <LocaleReceiver
                      componentName="Popconfirm"
                      defaultLocale={
                        Object {
                          "cancelText": "Cancel",
                          "okText": "OK",
                        }
                      }
                    >
                      [Function]
                    </LocaleReceiver>
                  }
                  popup={[Function]}
                  popupAlign={Object {}}
                  popupClassName="ant-popconfirm"
                  popupMotion={
                    Object {
                      "motionDeadline": 1000,
                      "motionName": "ant-zoom-big",
                    }
                  }
                  popupPlacement="top"
                  popupStyle={Object {}}
                  popupTransitionName="ant-zoom-big"
                  popupVisible={true}
                  prefixCls="ant-popover"
                  showAction={Array []}
                  style={
                    Object {
                      "backgroundColor": "red",
                      "padding": 0,
                    }
                  }
                  visible={true}
                >
                  <SwitchComponent
                    autoFocus={false}
                    checked={false}
                    className="ant-popover-open"
                    disabled={false}
                    key="trigger"
                    loadingFlag={false}
                    offName=""
                    onChange={[Function]}
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    onMouseDown={[Function]}
                    onName=""
                    onTouchStart={[Function]}
                    size="default"
                  >
                    <Switch
                      autoFocus={false}
                      checked={false}
                      disabled={false}
                      loading={false}
                      onChange={[Function]}
                      onClick={[Function]}
                      size="default"
                    >
                      <Wave
                        insertExtraNode={true}
                      >
                        <Switch
                          autoFocus={false}
                          checked={false}
                          className=""
                          disabled={false}
                          loadingIcon={
                            <div
                              className="ant-switch-handle"
                            />
                          }
                          onChange={[Function]}
                          onClick={[Function]}
                          prefixCls="ant-switch"
                        >
                          <button
                            aria-checked={false}
                            autoFocus={false}
                            className="ant-switch"
                            disabled={false}
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            role="switch"
                            type="button"
                          >
                            <div
                              className="ant-switch-handle"
                            />
                            <span
                              className="ant-switch-inner"
                            />
                          </button>
                        </Switch>
                      </Wave>
                    </Switch>
                  </SwitchComponent>
                  <ForwardRef
                    didUpdate={[Function]}
                    getContainer={[Function]}
                    key="portal"
                  >
                    <Portal
                      containerInfo={
                        <div
                          style="position: absolute; top: 0px; left: 0px; width: 100%;"
                        >
                          <div>
                            <div
                              class="ant-popover ant-popconfirm"
                              style="opacity: 0;"
                            >
                              <div
                                class="ant-popover-content"
                              >
                                <div
                                  class="ant-popover-arrow"
                                >
                                  <span
                                    class="ant-popover-arrow-content"
                                  />
                                </div>
                                <div
                                  class="ant-popover-inner"
                                  role="tooltip"
                                >
                                  <div
                                    class="ant-popover-inner-content"
                                  >
                                    <div
                                      class="ant-popover-message"
                                    >
                                      <span
                                        aria-label="exclamation-circle"
                                        class="anticon anticon-exclamation-circle"
                                        role="img"
                                      >
                                        <svg
                                          aria-hidden="true"
                                          data-icon="exclamation-circle"
                                          fill="currentColor"
                                          focusable="false"
                                          height="1em"
                                          viewBox="64 64 896 896"
                                          width="1em"
                                        >
                                          <path
                                            d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm-32 232c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V296zm32 440a48.01 48.01 0 010-96 48.01 48.01 0 010 96z"
                                          />
                                        </svg>
                                      </span>
                                      <div
                                        class="ant-popover-message-title"
                                      />
                                    </div>
                                    <div
                                      class="ant-popover-buttons"
                                    >
                                      <button
                                        class="ant-btn ant-btn-default ant-btn-sm"
                                        type="button"
                                      >
                                        <span>
                                          cancel
                                        </span>
                                      </button>
                                      <button
                                        class="ant-btn ant-btn-primary ant-btn-sm"
                                        type="button"
                                      >
                                        <span>
                                          ok
                                        </span>
                                      </button>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      }
                    >
                      <Popup
                        align={
                          Object {
                            "ignoreShake": true,
                            "offset": Array [
                              0,
                              -4,
                            ],
                            "overflow": Object {
                              "adjustX": 1,
                              "adjustY": 1,
                            },
                            "points": Array [
                              "bc",
                              "tc",
                            ],
                            "targetOffset": Array [
                              0,
                              0,
                            ],
                          }
                        }
                        className="ant-popconfirm"
                        destroyPopupOnHide={false}
                        getClassNameFromAlign={[Function]}
                        getRootDomNode={[Function]}
                        mask={false}
                        motion={
                          Object {
                            "motionDeadline": 1000,
                            "motionName": "ant-zoom-big",
                          }
                        }
                        onAlign={[Function]}
                        onMouseDown={[Function]}
                        onTouchStart={[Function]}
                        prefixCls="ant-popover"
                        style={Object {}}
                        transitionName="ant-zoom-big"
                        visible={true}
                      >
                        <div>
                          <Mask
                            align={
                              Object {
                                "ignoreShake": true,
                                "offset": Array [
                                  0,
                                  -4,
                                ],
                                "overflow": Object {
                                  "adjustX": 1,
                                  "adjustY": 1,
                                },
                                "points": Array [
                                  "bc",
                                  "tc",
                                ],
                                "targetOffset": Array [
                                  0,
                                  0,
                                ],
                              }
                            }
                            className="ant-popconfirm"
                            destroyPopupOnHide={false}
                            getClassNameFromAlign={[Function]}
                            getRootDomNode={[Function]}
                            mask={false}
                            motion={
                              Object {
                                "motionDeadline": 1000,
                                "motionName": "ant-zoom-big",
                              }
                            }
                            onAlign={[Function]}
                            onMouseDown={[Function]}
                            onTouchStart={[Function]}
                            prefixCls="ant-popover"
                            style={Object {}}
                            transitionName="ant-zoom-big"
                            visible={true}
                          />
                          <PopupInner
                            align={
                              Object {
                                "ignoreShake": true,
                                "offset": Array [
                                  0,
                                  -4,
                                ],
                                "overflow": Object {
                                  "adjustX": 1,
                                  "adjustY": 1,
                                },
                                "points": Array [
                                  "bc",
                                  "tc",
                                ],
                                "targetOffset": Array [
                                  0,
                                  0,
                                ],
                              }
                            }
                            className="ant-popconfirm"
                            destroyPopupOnHide={false}
                            getClassNameFromAlign={[Function]}
                            getRootDomNode={[Function]}
                            mask={false}
                            motion={
                              Object {
                                "motionDeadline": 1000,
                                "motionName": "ant-zoom-big",
                              }
                            }
                            onAlign={[Function]}
                            onMouseDown={[Function]}
                            onTouchStart={[Function]}
                            prefixCls="ant-popover"
                            style={Object {}}
                            transitionName="ant-zoom-big"
                            visible={true}
                          >
                            <CSSMotion
                              leavedClassName="ant-popover-hidden"
                              motionDeadline={1000}
                              motionName="ant-zoom-big"
                              onAppearEnd={[Function]}
                              onAppearPrepare={[Function]}
                              onEnterEnd={[Function]}
                              onEnterPrepare={[Function]}
                              onLeaveEnd={[Function]}
                              removeOnLeave={false}
                              visible={true}
                            >
                              <DomWrapper>
                                <Align
                                  align={
                                    Object {
                                      "ignoreShake": true,
                                      "offset": Array [
                                        0,
                                        -4,
                                      ],
                                      "overflow": Object {
                                        "adjustX": 1,
                                        "adjustY": 1,
                                      },
                                      "points": Array [
                                        "bc",
                                        "tc",
                                      ],
                                      "targetOffset": Array [
                                        0,
                                        0,
                                      ],
                                    }
                                  }
                                  disabled={true}
                                  key="popup"
                                  monitorWindowResize={true}
                                  onAlign={[Function]}
                                  target={[Function]}
                                >
                                  <div
                                    className="ant-popover ant-popconfirm"
                                    onMouseDownCapture={[Function]}
                                    onTouchStartCapture={[Function]}
                                    style={
                                      Object {
                                        "opacity": 0,
                                        "pointerEvents": undefined,
                                        "zIndex": undefined,
                                      }
                                    }
                                  >
                                    <div
                                      className="ant-popover-content"
                                    >
                                      <div
                                        className="ant-popover-arrow"
                                        key="arrow"
                                      >
                                        <span
                                          className="ant-popover-arrow-content"
                                        />
                                      </div>
                                      <Content
                                        key="content"
                                        overlay={
                                          <LocaleReceiver
                                            componentName="Popconfirm"
                                            defaultLocale={
                                              Object {
                                                "cancelText": "Cancel",
                                                "okText": "OK",
                                              }
                                            }
                                          >
                                            [Function]
                                          </LocaleReceiver>
                                        }
                                        prefixCls="ant-popover"
                                      >
                                        <div
                                          className="ant-popover-inner"
                                          role="tooltip"
                                        >
                                          <LocaleReceiver
                                            componentName="Popconfirm"
                                            defaultLocale={
                                              Object {
                                                "cancelText": "Cancel",
                                                "okText": "OK",
                                              }
                                            }
                                          >
                                            <div
                                              className="ant-popover-inner-content"
                                            >
                                              <div
                                                className="ant-popover-message"
                                              >
                                                <ForwardRef(ExclamationCircleFilled)>
                                                  <AntdIcon
                                                    icon={
                                                      Object {
                                                        "icon": Object {
                                                          "attrs": Object {
                                                            "focusable": "false",
                                                            "viewBox": "64 64 896 896",
                                                          },
                                                          "children": Array [
                                                            Object {
                                                              "attrs": Object {
                                                                "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm-32 232c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V296zm32 440a48.01 48.01 0 010-96 48.01 48.01 0 010 96z",
                                                              },
                                                              "tag": "path",
                                                            },
                                                          ],
                                                          "tag": "svg",
                                                        },
                                                        "name": "exclamation-circle",
                                                        "theme": "filled",
                                                      }
                                                    }
                                                  >
                                                    <span
                                                      aria-label="exclamation-circle"
                                                      className="anticon anticon-exclamation-circle"
                                                      role="img"
                                                    >
                                                      <IconReact
                                                        icon={
                                                          Object {
                                                            "icon": Object {
                                                              "attrs": Object {
                                                                "focusable": "false",
                                                                "viewBox": "64 64 896 896",
                                                              },
                                                              "children": Array [
                                                                Object {
                                                                  "attrs": Object {
                                                                    "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm-32 232c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V296zm32 440a48.01 48.01 0 010-96 48.01 48.01 0 010 96z",
                                                                  },
                                                                  "tag": "path",
                                                                },
                                                              ],
                                                              "tag": "svg",
                                                            },
                                                            "name": "exclamation-circle",
                                                            "theme": "filled",
                                                          }
                                                        }
                                                      >
                                                        <svg
                                                          aria-hidden="true"
                                                          data-icon="exclamation-circle"
                                                          fill="currentColor"
                                                          focusable="false"
                                                          height="1em"
                                                          key="svg-exclamation-circle"
                                                          viewBox="64 64 896 896"
                                                          width="1em"
                                                        >
                                                          <path
                                                            d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm-32 232c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V296zm32 440a48.01 48.01 0 010-96 48.01 48.01 0 010 96z"
                                                            key="svg-exclamation-circle-svg-0"
                                                          />
                                                        </svg>
                                                      </IconReact>
                                                    </span>
                                                  </AntdIcon>
                                                </ForwardRef(ExclamationCircleFilled)>
                                                <div
                                                  className="ant-popover-message-title"
                                                />
                                              </div>
                                              <div
                                                className="ant-popover-buttons"
                                              >
                                                <Button
                                                  onClick={[Function]}
                                                  size="small"
                                                >
                                                  <Wave
                                                    disabled={false}
                                                  >
                                                    <button
                                                      className="ant-btn ant-btn-default ant-btn-sm"
                                                      disabled={false}
                                                      onClick={[Function]}
                                                      type="button"
                                                    >
                                                      <LoadingIcon
                                                        existIcon={false}
                                                        loading={false}
                                                        prefixCls="ant-btn"
                                                      >
                                                        <CSSMotion
                                                          motionName="ant-btn-loading-icon-motion"
                                                          onAppearActive={[Function]}
                                                          onAppearStart={[Function]}
                                                          onEnterActive={[Function]}
                                                          onEnterStart={[Function]}
                                                          onLeaveActive={[Function]}
                                                          onLeaveStart={[Function]}
                                                          removeOnLeave={true}
                                                          visible={false}
                                                        >
                                                          <DomWrapper />
                                                        </CSSMotion>
                                                      </LoadingIcon>
                                                      <span
                                                        key=".0"
                                                      >
                                                        cancel
                                                      </span>
                                                    </button>
                                                  </Wave>
                                                </Button>
                                                <ActionButton
                                                  actionFn={[Function]}
                                                  buttonProps={
                                                    Object {
                                                      "size": "small",
                                                      "type": "primary",
                                                    }
                                                  }
                                                  close={[Function]}
                                                  emitEvent={true}
                                                  prefixCls="ant-btn"
                                                  quitOnNullishReturnValue={true}
                                                >
                                                  <Button
                                                    loading={false}
                                                    onClick={[Function]}
                                                    prefixCls="ant-btn"
                                                    size="small"
                                                    type="primary"
                                                  >
                                                    <Wave
                                                      disabled={false}
                                                    >
                                                      <button
                                                        className="ant-btn ant-btn-primary ant-btn-sm"
                                                        disabled={false}
                                                        onClick={[Function]}
                                                        type="button"
                                                      >
                                                        <LoadingIcon
                                                          existIcon={false}
                                                          loading={false}
                                                          prefixCls="ant-btn"
                                                        >
                                                          <CSSMotion
                                                            motionName="ant-btn-loading-icon-motion"
                                                            onAppearActive={[Function]}
                                                            onAppearStart={[Function]}
                                                            onEnterActive={[Function]}
                                                            onEnterStart={[Function]}
                                                            onLeaveActive={[Function]}
                                                            onLeaveStart={[Function]}
                                                            removeOnLeave={true}
                                                            visible={false}
                                                          >
                                                            <DomWrapper />
                                                          </CSSMotion>
                                                        </LoadingIcon>
                                                        <span
                                                          key=".0"
                                                        >
                                                          ok
                                                        </span>
                                                      </button>
                                                    </Wave>
                                                  </Button>
                                                </ActionButton>
                                              </div>
                                            </div>
                                          </LocaleReceiver>
                                        </div>
                                      </Content>
                                    </div>
                                  </div>
                                </Align>
                              </DomWrapper>
                            </CSSMotion>
                          </PopupInner>
                        </div>
                      </Popup>
                    </Portal>
                  </ForwardRef>
                </Trigger>
              </ForwardRef(Tooltip)>
            </Tooltip>
          </Popover>
        </ForwardRef>
      </PopComponent>
    </div>
  </Switch>
</SwitchWeb>
`;

exports[`SwitchWeb with editable value renders the structure correctly 1`] = `
<SwitchWeb
  autoFocus={false}
  checked={
    Object {
      "displayValue": "Formatted false",
      "formatter": Object {
        "config": Object {},
        "format": [MockFunction] {
          "calls": Array [
            Array [
              false,
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": "Formatted false",
            },
          ],
        },
        "getFormatPlaceholder": [MockFunction],
        "parse": [MockFunction],
        "type": "datetime",
        "withConfig": [MockFunction],
      },
      "readOnly": false,
      "setFormatter": [MockFunction],
      "setTextValue": [MockFunction],
      "setValidator": [MockFunction],
      "setValue": [MockFunction],
      "status": "available",
      "validation": undefined,
      "value": false,
    }
  }
  confirmType="pop"
  confirmcancelText="cancel"
  confirmokText="ok"
  confirmokType="primary"
  id="runjian.switchweb.SwitchWeb1"
  name="sYYSwitchWeb"
  offName=""
  onName=""
  openconfirm={false}
  size="default"
  tabIndex={0}
>
  <Switch
    autoFocus={false}
    checked={false}
    confirmType="pop"
    confirmcancelText="cancel"
    confirmokText="ok"
    confirmokType="primary"
    disabled={false}
    loadingFlag={false}
    offName=""
    onCancel={[Function]}
    onChange={[Function]}
    onClick={[Function]}
    onConfirm={[Function]}
    onName=""
    openconfirm={false}
    size="default"
  >
    <div>
      <SwitchComponent
        autoFocus={false}
        checked={false}
        disabled={false}
        loadingFlag={false}
        offName=""
        onChange={[Function]}
        onClick={[Function]}
        onName=""
        size="default"
      >
        <Switch
          autoFocus={false}
          checked={false}
          disabled={false}
          loading={false}
          onChange={[Function]}
          onClick={[Function]}
          size="default"
        >
          <Wave
            insertExtraNode={true}
          >
            <Switch
              autoFocus={false}
              checked={false}
              className=""
              disabled={false}
              loadingIcon={
                <div
                  className="ant-switch-handle"
                />
              }
              onChange={[Function]}
              onClick={[Function]}
              prefixCls="ant-switch"
            >
              <button
                aria-checked={false}
                autoFocus={false}
                className="ant-switch"
                disabled={false}
                onClick={[Function]}
                onKeyDown={[Function]}
                role="switch"
                type="button"
              >
                <div
                  className="ant-switch-handle"
                />
                <span
                  className="ant-switch-inner"
                />
              </button>
            </Switch>
          </Wave>
        </Switch>
      </SwitchComponent>
    </div>
  </Switch>
</SwitchWeb>
`;
